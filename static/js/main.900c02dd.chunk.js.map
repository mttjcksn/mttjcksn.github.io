{"version":3,"sources":["menu/Library.tsx","menu/Menu.tsx","App.tsx","nodes/InputNode.tsx","nodes/OutputNode.tsx","nodes/fxNode.tsx","serviceWorker.ts","index.tsx"],"names":["Library","onDragStart","event","nodeType","dataTransfer","setData","effectAllowed","className","style","gridColumn","draggable","Menu","options","state","show","activeTab","this","setState","tab","onClick","setShow","fontFamily","Button","active","renderActiveTab","variant","React","Component","nodeTypes","audioInNode","memo","args","type","position","Position","Bottom","background","onConnect","params","console","log","data","text","audioOutNode","Top","testNode","Left","color","onChange","defaultValue","id","top","bottom","initialElements","x","y","reactFlowWrapper","useRef","useState","reactFlowInstance","setReactFlowInstance","elements","setElements","height","ref","onElementsRemove","elementsToRemove","els","removeElements","addEdge","onLoad","_reactFlowInstance","onDrop","preventDefault","reactFlowBounds","current","getBoundingClientRect","getData","project","clientX","left","clientY","newNode","label","es","concat","onDragOver","dropEffect","deleteKeyCode","gap","size","Boolean","window","location","hostname","match","ReactDOM","render","App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.900c02dd.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nimport './menu.css';\r\n\r\n export default function Library() {\r\n\r\n    const onDragStart = (event: any, nodeType: any) => {\r\n        event.dataTransfer.setData('application/reactflow', nodeType);\r\n        event.dataTransfer.effectAllowed = 'move';\r\n      };\r\n\r\n  return (\r\n    <>\r\n        <div className=\"libraryLayout\">\r\n            <div style={{gridColumn: '1 / 4'}} className=\"menuTitle\">Library</div>\r\n            <div className=\"librarySubtitle\">Audio Effects</div>\r\n            <div className=\"libraryObjectContainer\">\r\n                <div className=\"dndnode input\" onDragStart={(event) => onDragStart(event, 'input')} draggable>\r\n                Input Node\r\n                </div>\r\n            </div>\r\n            <div className=\"libraryObjectContainer\">\r\n                <div className=\"dndnode\" onDragStart={(event) => onDragStart(event, 'default')} draggable>\r\n                Default Node\r\n                </div>\r\n            </div>\r\n            <div className=\"libraryObjectContainer\">\r\n                <div className=\"dndnode output\" onDragStart={(event) => onDragStart(event, 'output')} draggable>\r\n                Output Node\r\n                </div>\r\n            </div>\r\n        </div>\r\n    </>\r\n  );\r\n};","import React from 'react'\r\nimport * as FaIcons from 'react-icons/fa';\r\nimport Button from 'react-bootstrap/Button';\r\nimport './menu.css';\r\nimport Library from './Library';\r\n\r\n\r\nexport interface MenuProps {\r\n    show:false\r\n  }\r\n\r\ninterface MenuState {\r\n    show: boolean,\r\n    activeTab: number\r\n}\r\n\r\n\r\nexport class Menu extends React.Component <MenuProps>{\r\n    \r\n    state: MenuState;\r\n        \r\n    constructor(options: MenuProps){\r\n        super(options);\r\n\r\n        this.state = {show: false, activeTab: 0};\r\n        \r\n    };\r\n\r\n    setShow(show: boolean){\r\n        this.setState({show: show});\r\n    }\r\n\r\n    renderActiveTab(tab: number)\r\n    {\r\n        this.setState({activeTab:tab});\r\n    }\r\n\r\n\r\n\r\n    \r\n\trender() {\r\n\r\n\t\treturn (\r\n            <>\r\n            <div className='navbar'>\r\n                <div className=\"menuIcon\"><FaIcons.FaBars onClick = {()=>this.setShow(!this.state.show)} /></div>\r\n                <div style={{fontFamily: \"arcade\"}}>&nbsp;&nbsp;h o t w i r e</div>\r\n                \r\n            </div>\r\n            <div className={this.state.show ? 'menu_show menu' : 'menu_hide menu'}>\r\n\r\n                \r\n                \r\n                <Button active={this.state.activeTab === 0 ? true : false} className=\"menuTabs menuTab1\"  onClick={()=>this.renderActiveTab(0)} variant=\"outline-secondary\">Library</Button>\r\n                <Button active={this.state.activeTab === 1 ? true : false} className=\"menuTabs menuTab2\"  onClick={()=>this.renderActiveTab(1)} variant=\"outline-secondary\">Inspector</Button>\r\n                <Button active={this.state.activeTab === 2 ? true : false} className=\"menuTabs menuTab3\"  onClick={()=>this.renderActiveTab(2)} variant=\"outline-secondary\">...</Button>\r\n                <Button active={this.state.activeTab === 3 ? true : false} className=\"menuTabs menuTab4\"  onClick={()=>this.renderActiveTab(3)} variant=\"outline-secondary\">Advanced</Button>\r\n                 \r\n                {\r\n                    this.state.activeTab === 1 ? \r\n                     null\r\n                    :\r\n                    this.state.activeTab === 0 ? \r\n                        <Library/>\r\n                    : \r\n                    this.state.activeTab === 2 ? \r\n                        null\r\n                    :\r\n                        null\r\n                }\r\n    \r\n            </div>\r\n            </>\r\n\t\t);\r\n\t}\r\n};\r\n\r\n","import React, { useState, useRef } from 'react';\r\nimport ReactFlow, { ReactFlowProvider, Background, Elements, removeElements, addEdge, Controls } from 'react-flow-renderer';\r\nimport {Menu} from './menu/Menu';\r\nimport {exampleElements} from './initial-elements'\r\nimport InputNode from './nodes/InputNode';\r\nimport OutputNode from './nodes/OutputNode';\r\nimport fxNode from './nodes/fxNode';\r\n\r\n\r\nconst nodeTypes = {\r\n  audioInNode: InputNode,\r\n  audioOutNode: OutputNode,\r\n  testNode: fxNode,\r\n};\r\n\r\nlet initialElements:Elements = [\r\n  {\r\n    id: '1',\r\n    type: 'audioInNode',\r\n    data: { text:'Audio Input' },\r\n    position: { x: 500, y: 100 },\r\n  },\r\n  {\r\n    id: '2',\r\n    type: 'audioOutNode',\r\n    data: { text:'Audio Output' },\r\n    position: { x: 500, y: 600 },\r\n  }\r\n];\r\n\r\n\r\nlet id = 3;\r\n\r\nexport default () => {\r\n\r\n\r\n  const getId= () => `dndnode_`+id++\r\n  \r\n  const reactFlowWrapper: any = useRef(null);\r\n  const [reactFlowInstance, setReactFlowInstance]:any = useState(null);\r\n  const [elements, setElements] = useState(initialElements);\r\n\r\n  const onConnect = (params: any) => setElements((els) => addEdge(params, els));\r\n  const onElementsRemove = (elementsToRemove: any) => setElements((els) => removeElements(elementsToRemove, els));\r\n  const onLoad = (_reactFlowInstance: any) => setReactFlowInstance(_reactFlowInstance);\r\n  \r\n  const onDragOver = (event: any) => {\r\n    event.preventDefault();\r\n    event.dataTransfer.dropEffect = 'move';\r\n  };\r\n  \r\n    const onDrop = (event: any) => {\r\n      event.preventDefault();\r\n      const reactFlowBounds = reactFlowWrapper.current.getBoundingClientRect();\r\n        \r\n      const type = event.dataTransfer.getData('application/reactflow');\r\n      const position = reactFlowInstance.project({\r\n          x: event.clientX - reactFlowBounds.left,\r\n          y: event.clientY - reactFlowBounds.top,\r\n        });\r\n    \r\n      const newNode = {\r\n        id: getId(),\r\n        type,\r\n        position,\r\n        data: { label: `${type} node` },\r\n      };\r\n\r\n      setElements((es) => es.concat(newNode));\r\n  \r\n    };\r\n\r\n\r\n\r\n\r\n\r\n  return (\r\n    <div style={{ height:\"100vh\" }}>\r\n      <Menu show={false}/>\r\n      <ReactFlowProvider>\r\n        <div style={{ height:\"100vh\" }} className=\"reactflow-wrapper\" ref={reactFlowWrapper}>\r\n        <ReactFlow\r\n          style={{background: '#171620'}}\r\n          elements={elements}\r\n          onElementsRemove={onElementsRemove}\r\n          onConnect={onConnect}\r\n          onLoad={onLoad}\r\n          onDrop={onDrop}\r\n          onDragOver={onDragOver}\r\n          nodeTypes={nodeTypes}\r\n          deleteKeyCode={46} /* 'delete'-key */\r\n        >\r\n          <Background  gap={12} size={1} color={'#000000'}/>\r\n          <Controls/>\r\n        </ReactFlow>\r\n        </div>\r\n      </ReactFlowProvider>\r\n      \r\n    </div>\r\n  );\r\n};","import React, { memo } from 'react';\r\nimport { Handle, Position } from 'react-flow-renderer';\r\nimport './node.css';\r\n\r\nexport default memo((args: any) => {\r\n  return (\r\n    <>\r\n      <Handle\r\n        type=\"source\"\r\n        position={Position.Bottom}\r\n        style={{ background: '#555' }}\r\n        onConnect={(params) => console.log('handle onConnect', params)}\r\n      />\r\n      <div className=\"nodeStyle\"> \r\n        {args.data.text}\r\n      </div>\r\n\r\n    </>\r\n  );\r\n});","import React, { memo } from 'react';\r\nimport { Handle, Position } from 'react-flow-renderer';\r\nimport './node.css';\r\n\r\nexport default memo((args: any) => {\r\n  return (\r\n    <>\r\n      <Handle\r\n        type=\"target\"\r\n        position={Position.Top}\r\n        style={{ background: '#555', }}\r\n        onConnect={(params) => console.log('handle onConnect', params)}\r\n      />\r\n      <div className=\"nodeStyle\"> \r\n        {args.data.text}\r\n      </div>\r\n\r\n    </>\r\n  );\r\n});","import React, { memo } from 'react';\r\nimport { Handle, Position } from 'react-flow-renderer';\r\n\r\nexport default memo((args: any) => {\r\n  return (\r\n    <>\r\n      <Handle\r\n        type=\"target\"\r\n        position={Position.Left}\r\n        style={{ background: '#555' }}\r\n        onConnect={(params) => console.log('handle onConnect', params)}\r\n      />\r\n      <div style={{color:'#ffffff'}}> \r\n        {args.data.text}<strong>{args.data.color}</strong>\r\n      </div>\r\n      <input\r\n        className=\"nodrag\"\r\n        type=\"color\"\r\n        onChange={args.data.onChange}\r\n        defaultValue={args.data.color}\r\n      />\r\n      <Handle\r\n        type=\"source\"\r\n        position={Position.Left}\r\n        id=\"a\"\r\n        style={{ top: 10, background: '#555' }}\r\n      />\r\n      <Handle\r\n        type=\"source\"\r\n        position={Position.Left}\r\n        id=\"b\"\r\n        style={{ bottom: 10, top: 'auto', background: '#555' }}\r\n      />\r\n    </>\r\n  );\r\n});","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}